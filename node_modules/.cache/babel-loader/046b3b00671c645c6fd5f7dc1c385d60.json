{"remainingRequest":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/babel-loader/lib/index.js!/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/carlaheywood/Documents/GitHub/Accutrate/src/views/app/applications/Survey.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/src/views/app/applications/Survey.vue","mtime":1558175808000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _toConsumableArray from \"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapMutations, mapActions } from 'vuex';\nimport vSelect from 'vue-select';\nimport 'vue-select/dist/vue-select.css';\nimport SurveyListItem from '@/components/SurveyApp/SurveyListItem';\nimport ApplicationMenu from '@/components/Common/ApplicationMenu';\nexport default {\n  components: {\n    vSelect: vSelect,\n    SurveyListItem: SurveyListItem,\n    ApplicationMenu: ApplicationMenu\n  },\n  data: function data() {\n    return {\n      sort: {\n        column: 'title',\n        label: 'Title'\n      },\n      sortOptions: [{\n        column: 'title',\n        label: 'Title'\n      }, {\n        column: 'category',\n        label: 'Category'\n      }, {\n        column: 'label',\n        label: 'Label'\n      }, {\n        column: 'status',\n        label: 'Status'\n      }],\n      search: '',\n      selectedItems: [],\n      categories: [{\n        label: 'Development',\n        value: 'Development'\n      }, {\n        label: 'Workplace',\n        value: 'Workplace'\n      }, {\n        label: 'Hardware',\n        value: 'Hardware'\n      }],\n      labels: [{\n        label: 'EDUCATION',\n        value: 'EDUCATION',\n        color: 'secondary'\n      }, {\n        label: 'NEW FRAMEWORK',\n        value: 'NEW FRAMEWORK',\n        color: 'primary'\n      }, {\n        label: 'PERSONAL',\n        value: 'PERSONAL',\n        color: 'info'\n      }],\n      statuses: [{\n        text: 'ACTIVE',\n        value: 'ACTIVE'\n      }, {\n        text: 'COMPLETED',\n        value: 'COMPLETED'\n      }],\n      newItem: {\n        title: '',\n        category: '',\n        detail: '',\n        label: '',\n        status: ''\n      }\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['isLoadSurveys', 'surveyItems', 'surveyError'])),\n  methods: _objectSpread({}, mapActions(['getSurveyItems']), mapMutations(['addSurveyItem']), {\n    isSelectedAll: function isSelectedAll() {\n      return this.selectedItems.length >= this.surveyItems.length;\n    },\n    isAnyItemSelected: function isAnyItemSelected() {\n      return this.selectedItems.length > 0 && this.selectedItems.length < this.surveyItems.length;\n    },\n    hideModal: function hideModal(refname) {\n      this.$refs[refname].hide();\n    },\n    changeOrderBy: function changeOrderBy(sort) {\n      this.sort = sort;\n    },\n    addNewItem: function addNewItem() {\n      var date = new Date();\n      this.addSurveyItem({\n        title: this.newItem.title,\n        category: this.newItem.category.value,\n        detail: this.newItem.detail,\n        label: this.newItem.label.value,\n        status: this.newItem.status,\n        date: date.getDay() + '.' + date.getMonth() + 1 + '.' + date.getFullYear(),\n        labelColor: this.newItem.label.color,\n        questions: []\n      });\n      this.newItem = {\n        title: '',\n        category: '',\n        detail: '',\n        label: '',\n        status: ''\n      };\n      this.hideModal('modalright');\n    },\n    selectAll: function selectAll(isToggle) {\n      if (this.selectedItems.length >= this.surveyItems.length) {\n        if (isToggle) {\n          this.selectedItems = [];\n        }\n      } else {\n        this.selectedItems = this.surveyItems.map(function (x) {\n          return x.id;\n        });\n      }\n    },\n    keymap: function keymap(event) {\n      switch (event.srcKey) {\n        case 'select':\n          this.selectAll(false);\n          break;\n\n        case 'undo':\n          this.selectedItems = [];\n          break;\n      }\n    },\n    getIndex: function getIndex(value, arr, prop) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i][prop] === value) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    toggleItem: function toggleItem(event, itemId) {\n      if (event.shiftKey && this.selectedItems.length > 0) {\n        var _this$selectedItems;\n\n        var itemsForToggle = this.surveyItems;\n        var start = this.getIndex(itemId, itemsForToggle, 'id');\n        var end = this.getIndex(this.selectedItems[this.selectedItems.length - 1], itemsForToggle, 'id');\n        itemsForToggle = itemsForToggle.slice(Math.min(start, end), Math.max(start, end) + 1);\n\n        (_this$selectedItems = this.selectedItems).push.apply(_this$selectedItems, _toConsumableArray(itemsForToggle.map(function (item) {\n          return item.id;\n        })));\n      } else {\n        if (this.selectedItems.includes(itemId)) {\n          this.selectedItems = this.selectedItems.filter(function (x) {\n            return x !== itemId;\n          });\n        } else {\n          this.selectedItems.push(itemId);\n        }\n      }\n    },\n    handleContextmenu: function handleContextmenu(vnode) {\n      if (!this.selectedItems.includes(vnode.key)) {\n        this.selectedItems = [vnode.key];\n      }\n    },\n    onContextCopy: function onContextCopy() {\n      console.log('context menu item clicked - Copy Items: ', this.selectedItems);\n    },\n    onContextArchive: function onContextArchive() {\n      console.log('context menu item clicked - Move to Archive Items: ', this.selectedItems);\n    },\n    onContextDelete: function onContextDelete() {\n      console.log('context menu item clicked - Delete Items: ', this.selectedItems);\n    }\n  }),\n  mounted: function mounted() {\n    this.getSurveyItems();\n  }\n};",{"version":3,"sources":["Survey.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"disable-text-selection\">\r\n    <b-row class=\"app-row survey-app\" >\r\n      <b-colxx xxs=\"12\">\r\n        <div class=\"mb-2\">\r\n          <h1>{{ $t('menu.survey') }}</h1>\r\n          <div class=\"float-sm-right\">\r\n            <b-button v-b-modal.modalright variant=\"primary\" size=\"lg\" class=\"top-right-button\">{{ $t('survey.add-new') }}</b-button>\r\n            <b-button-group v-if=\"isLoadSurveys\">\r\n              <b-dropdown  split right @click=\"selectAll(true)\" class=\"check-button\" variant=\"primary\">\r\n                  <label class=\"custom-control custom-checkbox pl-4 mb-0 d-inline-block\" slot=\"button-content\">\r\n                    <input class=\"custom-control-input\" type=\"checkbox\"\r\n                    :checked=\"isSelectedAll()\"\r\n                    v-shortkey=\"{select: ['ctrl','a'], undo: ['ctrl','d']}\" @shortkey=\"keymap\"\r\n                    />\r\n                    <span :class=\"{\r\n                      'custom-control-label' :true,\r\n                      'indeterminate' : isAnyItemSelected()\r\n                    }\"/>\r\n                  </label>\r\n                <b-dropdown-item>{{$t('survey.delete')}}</b-dropdown-item>\r\n                <b-dropdown-item>{{$t('survey.another-action')}}</b-dropdown-item>\r\n              </b-dropdown>\r\n            </b-button-group>\r\n            <b-modal id=\"modalright\" ref=\"modalright\" :title=\"$t('survey.add-new-title')\" class=\"modal-right\">\r\n                <b-form>\r\n                  <b-form-group :label=\"$t('survey.title')\">\r\n                    <b-form-input v-model=\"newItem.title\"  />\r\n                  </b-form-group>\r\n                  <b-form-group  :label=\"$t('todo.detail')\">\r\n                    <b-textarea  v-model=\"newItem.detail\"  :rows=\"2\" :max-rows=\"2\"/>\r\n                  </b-form-group>\r\n                  <b-form-group :label=\"$t('survey.category')\">\r\n                      <v-select  :options=\"categories\" v-model=\"newItem.category\"/>\r\n                  </b-form-group>\r\n                  <b-form-group :label=\"$t('survey.label')\">\r\n                      <v-select  :options=\"labels\" v-model=\"newItem.label\"/>\r\n                  </b-form-group>\r\n                  <b-form-group :label=\"$t('survey.status')\">\r\n                    <b-form-radio-group stacked class=\"pt-2\" :options=\"statuses\" v-model=\"newItem.status\" />\r\n                  </b-form-group>\r\n                </b-form>\r\n\r\n                <template slot=\"modal-footer\">\r\n                  <b-button variant=\"outline-secondary\" @click=\"hideModal('modalright')\">{{ $t('survey.cancel') }}</b-button>\r\n                  <b-button variant=\"primary\" @click=\"addNewItem()\" class=\"mr-1\">{{ $t('survey.submit') }}</b-button>\r\n                </template>\r\n              </b-modal>\r\n\r\n          </div>\r\n          <piaf-breadcrumb/>\r\n        </div>\r\n        <div class=\"mb-2\">\r\n          <b-button variant=\"empty\" class=\"pt-0 pl-0 d-inline-block d-md-none\" v-b-toggle.displayOptions>\r\n            {{ $t('survey.display-options') }} <i class=\"simple-icon-arrow-down align-middle\" />\r\n          </b-button>\r\n          <b-collapse id=\"displayOptions\" class=\"d-md-block\">\r\n            <div class=\"d-block d-md-inline-block mb-2\">\r\n              <b-dropdown id=\"ddown1\" :text=\"`${$t('survey.orderby')} ${sort.label}`\" variant=\"outline-dark\" class=\"mr-1 float-md-left btn-group \" size=\"xs\">\r\n                  <b-dropdown-item v-for=\"(order,index) in sortOptions\" :key=\"`order${index}`\" @click=\"changeOrderBy(order)\" >{{ order.label }}</b-dropdown-item>\r\n              </b-dropdown>\r\n              <div class=\"search-sm d-inline-block float-md-left mr-1 align-top\">\r\n                <b-input :placeholder=\"$t('menu.search')\" v-model=\"search\"/>\r\n              </div>\r\n            </div>\r\n          </b-collapse>\r\n        </div>\r\n        <div class=\"separator mb-5\"/>\r\n\r\n        <b-row v-if=\"isLoadSurveys\" key=\"itemList\">\r\n            <b-colxx xxs=\"12\" v-for=\"(item,index) in surveyItems\" :key=\"`item${index}`\">\r\n              <survey-list-item\r\n                  :key=\"item.id\"\r\n                  :data=\"item\"\r\n                  :selected-items=\"selectedItems\"\r\n                  @toggle-item=\"toggleItem\"\r\n                  v-contextmenu:contextmenu\r\n                />\r\n            </b-colxx>\r\n        </b-row>\r\n        <div v-else class=\"loading\" key=\"itemLoading\"></div>\r\n      </b-colxx>\r\n    </b-row>\r\n    <v-contextmenu ref=\"contextmenu\" @contextmenu=\"handleContextmenu\">\r\n      <v-contextmenu-item @click=\"onContextCopy()\"><i class=\"simple-icon-docs\" /> <span>Copy</span></v-contextmenu-item>\r\n      <v-contextmenu-item @click=\"onContextArchive()\"><i class=\"simple-icon-drawer\" /> <span>Move to archive</span></v-contextmenu-item>\r\n      <v-contextmenu-item @click=\"onContextDelete()\"><i class=\"simple-icon-trash\" /> <span>Delete</span></v-contextmenu-item>\r\n    </v-contextmenu>\r\n\r\n    <application-menu>\r\n      <vue-perfect-scrollbar :settings=\"{ suppressScrollX: true, wheelPropagation: false }\"  >\r\n        <div class=\"p-4\">\r\n          <p class=\"text-muted text-small mb-3\">{{$t('survey.status')}}</p>\r\n          <ul class=\"list-unstyled mb-4\">\r\n            <li class=\"nav-item\"><a href=\"#\" >\r\n                 <i class=\"simple-icon-reload\" />{{$t('survey.all-surveys')}} <span class=\"float-right\" v-if=\"isLoadSurveys\">{{surveyItems.length}}</span>\r\n              </a></li>\r\n            <li class=\"nav-item\"><a href=\"#\" >\r\n                 <i class=\"simple-icon-refresh\" />{{$t('survey.active-surveys')}} <span class=\"float-right\" v-if=\"isLoadSurveys\">{{surveyItems.filter(x => x.status === \"PENDING\").length}}</span>\r\n              </a></li>\r\n            <li class=\"nav-item\"><a href=\"#\" >\r\n                 <i class=\"simple-icon-check\" />{{$t('survey.completed-surveys')}} <span class=\"float-right\" v-if=\"isLoadSurveys\">{{surveyItems.filter(x => x.status === \"COMPLETED\").length}}</span>\r\n              </a></li>\r\n          </ul>\r\n            <p class=\"text-muted text-small mb-1\">{{$t('survey.categories')}}</p>\r\n            <ul class=\"list-unstyled mb-4\">\r\n              <b-form-radio-group stacked class=\"pt-2\" :options=\"categories.map((c)=> {return {text:c.label,value:c.value}})\"  />\r\n            </ul>\r\n             <p class=\"text-muted text-small mb-3\">{{$t('survey.labels')}}</p>\r\n            <div>\r\n              <p class=\"d-sm-inline-block mb-1\" v-for=\"(l,index) in labels\" :key=\"index\">\r\n                <a href=\"#\">\r\n                  <b-badge pill :variant=\"`outline-${l.color}`\" class=\"mb-1 mr-1\">{{l.label}}</b-badge>\r\n                </a>\r\n              </p>\r\n            </div>\r\n        </div>\r\n\r\n      </vue-perfect-scrollbar>\r\n    </application-menu>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\r\n\r\nimport vSelect from 'vue-select'\r\nimport 'vue-select/dist/vue-select.css'\r\nimport SurveyListItem from '@/components/SurveyApp/SurveyListItem'\r\nimport ApplicationMenu from '@/components/Common/ApplicationMenu'\r\n\r\nexport default {\r\n  components: {\r\n    vSelect,\r\n    SurveyListItem,\r\n    ApplicationMenu\r\n  },\r\n  data () {\r\n    return {\r\n      sort: { column: 'title', label: 'Title' },\r\n      sortOptions: [\r\n        { column: 'title', label: 'Title' },\r\n        { column: 'category', label: 'Category' },\r\n        { column: 'label', label: 'Label' },\r\n        { column: 'status', label: 'Status' }\r\n      ],\r\n      search: '',\r\n      selectedItems: [],\r\n      categories: [\r\n        { label: 'Development', value: 'Development' },\r\n        { label: 'Workplace', value: 'Workplace' },\r\n        { label: 'Hardware', value: 'Hardware' }\r\n      ],\r\n      labels: [\r\n        { label: 'EDUCATION', value: 'EDUCATION', color: 'secondary' },\r\n        { label: 'NEW FRAMEWORK', value: 'NEW FRAMEWORK', color: 'primary' },\r\n        { label: 'PERSONAL', value: 'PERSONAL', color: 'info' }\r\n      ],\r\n      statuses: [\r\n        { text: 'ACTIVE', value: 'ACTIVE' },\r\n        { text: 'COMPLETED', value: 'COMPLETED' }\r\n      ],\r\n      newItem: {\r\n        title: '',\r\n        category: '',\r\n        detail: '',\r\n        label: '',\r\n        status: ''\r\n      }\r\n\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isLoadSurveys', 'surveyItems', 'surveyError'])\r\n  },\r\n  methods: {\r\n    ...mapActions(['getSurveyItems']),\r\n    ...mapMutations(['addSurveyItem']),\r\n    isSelectedAll () {\r\n      return this.selectedItems.length >= this.surveyItems.length\r\n    },\r\n    isAnyItemSelected () {\r\n      return this.selectedItems.length > 0 && this.selectedItems.length < this.surveyItems.length\r\n    },\r\n    hideModal (refname) {\r\n      this.$refs[refname].hide()\r\n    },\r\n    changeOrderBy (sort) {\r\n      this.sort = sort\r\n    },\r\n    addNewItem () {\r\n      const date = new Date()\r\n      this.addSurveyItem({ title: this.newItem.title,\r\n        category: this.newItem.category.value,\r\n        detail: this.newItem.detail,\r\n        label: this.newItem.label.value,\r\n        status: this.newItem.status,\r\n        date: date.getDay() + '.' + date.getMonth() + 1 + '.' + date.getFullYear(),\r\n        labelColor: this.newItem.label.color,\r\n        questions: []\r\n      })\r\n      this.newItem = { title: '', category: '', detail: '', label: '', status: '' }\r\n      this.hideModal('modalright')\r\n    },\r\n    selectAll (isToggle) {\r\n      if (this.selectedItems.length >= this.surveyItems.length) {\r\n        if (isToggle) { this.selectedItems = [] }\r\n      } else {\r\n        this.selectedItems = this.surveyItems.map(x => x.id)\r\n      }\r\n    },\r\n    keymap (event) {\r\n      switch (event.srcKey) {\r\n        case 'select':\r\n          this.selectAll(false)\r\n          break\r\n        case 'undo':\r\n          this.selectedItems = []\r\n          break\r\n      }\r\n    },\r\n    getIndex (value, arr, prop) {\r\n      for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i][prop] === value) {\r\n          return i\r\n        }\r\n      }\r\n      return -1\r\n    },\r\n    toggleItem (event, itemId) {\r\n      if (event.shiftKey && this.selectedItems.length > 0) {\r\n        let itemsForToggle = this.surveyItems\r\n        var start = this.getIndex(itemId, itemsForToggle, 'id')\r\n        var end = this.getIndex(this.selectedItems[this.selectedItems.length - 1], itemsForToggle, 'id')\r\n        itemsForToggle = itemsForToggle.slice(Math.min(start, end), Math.max(start, end) + 1)\r\n        this.selectedItems.push(\r\n          ...itemsForToggle.map(item => {\r\n            return item.id\r\n          })\r\n        )\r\n      } else {\r\n        if (this.selectedItems.includes(itemId)) {\r\n          this.selectedItems = this.selectedItems.filter(x => x !== itemId)\r\n        } else { this.selectedItems.push(itemId) }\r\n      }\r\n    },\r\n    handleContextmenu (vnode) {\r\n      if (!this.selectedItems.includes(vnode.key)) {\r\n        this.selectedItems = [vnode.key]\r\n      }\r\n    },\r\n    onContextCopy () {\r\n      console.log('context menu item clicked - Copy Items: ', this.selectedItems)\r\n    },\r\n    onContextArchive () {\r\n      console.log('context menu item clicked - Move to Archive Items: ', this.selectedItems)\r\n    },\r\n    onContextDelete () {\r\n      console.log('context menu item clicked - Delete Items: ', this.selectedItems)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getSurveyItems()\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/views/app/applications"}]}
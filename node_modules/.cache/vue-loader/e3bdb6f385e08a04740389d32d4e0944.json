{"remainingRequest":"/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/src/views/app/applications/Survey.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/src/views/app/applications/Survey.vue","mtime":1558175808000},{"path":"/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/Vue.jsApp/Accutrate/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\r\n\r\nimport vSelect from 'vue-select'\r\nimport 'vue-select/dist/vue-select.css'\r\nimport SurveyListItem from '@/components/SurveyApp/SurveyListItem'\r\nimport ApplicationMenu from '@/components/Common/ApplicationMenu'\r\n\r\nexport default {\r\n  components: {\r\n    vSelect,\r\n    SurveyListItem,\r\n    ApplicationMenu\r\n  },\r\n  data () {\r\n    return {\r\n      sort: { column: 'title', label: 'Title' },\r\n      sortOptions: [\r\n        { column: 'title', label: 'Title' },\r\n        { column: 'category', label: 'Category' },\r\n        { column: 'label', label: 'Label' },\r\n        { column: 'status', label: 'Status' }\r\n      ],\r\n      search: '',\r\n      selectedItems: [],\r\n      categories: [\r\n        { label: 'Development', value: 'Development' },\r\n        { label: 'Workplace', value: 'Workplace' },\r\n        { label: 'Hardware', value: 'Hardware' }\r\n      ],\r\n      labels: [\r\n        { label: 'EDUCATION', value: 'EDUCATION', color: 'secondary' },\r\n        { label: 'NEW FRAMEWORK', value: 'NEW FRAMEWORK', color: 'primary' },\r\n        { label: 'PERSONAL', value: 'PERSONAL', color: 'info' }\r\n      ],\r\n      statuses: [\r\n        { text: 'ACTIVE', value: 'ACTIVE' },\r\n        { text: 'COMPLETED', value: 'COMPLETED' }\r\n      ],\r\n      newItem: {\r\n        title: '',\r\n        category: '',\r\n        detail: '',\r\n        label: '',\r\n        status: ''\r\n      }\r\n\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isLoadSurveys', 'surveyItems', 'surveyError'])\r\n  },\r\n  methods: {\r\n    ...mapActions(['getSurveyItems']),\r\n    ...mapMutations(['addSurveyItem']),\r\n    isSelectedAll () {\r\n      return this.selectedItems.length >= this.surveyItems.length\r\n    },\r\n    isAnyItemSelected () {\r\n      return this.selectedItems.length > 0 && this.selectedItems.length < this.surveyItems.length\r\n    },\r\n    hideModal (refname) {\r\n      this.$refs[refname].hide()\r\n    },\r\n    changeOrderBy (sort) {\r\n      this.sort = sort\r\n    },\r\n    addNewItem () {\r\n      const date = new Date()\r\n      this.addSurveyItem({ title: this.newItem.title,\r\n        category: this.newItem.category.value,\r\n        detail: this.newItem.detail,\r\n        label: this.newItem.label.value,\r\n        status: this.newItem.status,\r\n        date: date.getDay() + '.' + date.getMonth() + 1 + '.' + date.getFullYear(),\r\n        labelColor: this.newItem.label.color,\r\n        questions: []\r\n      })\r\n      this.newItem = { title: '', category: '', detail: '', label: '', status: '' }\r\n      this.hideModal('modalright')\r\n    },\r\n    selectAll (isToggle) {\r\n      if (this.selectedItems.length >= this.surveyItems.length) {\r\n        if (isToggle) { this.selectedItems = [] }\r\n      } else {\r\n        this.selectedItems = this.surveyItems.map(x => x.id)\r\n      }\r\n    },\r\n    keymap (event) {\r\n      switch (event.srcKey) {\r\n        case 'select':\r\n          this.selectAll(false)\r\n          break\r\n        case 'undo':\r\n          this.selectedItems = []\r\n          break\r\n      }\r\n    },\r\n    getIndex (value, arr, prop) {\r\n      for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i][prop] === value) {\r\n          return i\r\n        }\r\n      }\r\n      return -1\r\n    },\r\n    toggleItem (event, itemId) {\r\n      if (event.shiftKey && this.selectedItems.length > 0) {\r\n        let itemsForToggle = this.surveyItems\r\n        var start = this.getIndex(itemId, itemsForToggle, 'id')\r\n        var end = this.getIndex(this.selectedItems[this.selectedItems.length - 1], itemsForToggle, 'id')\r\n        itemsForToggle = itemsForToggle.slice(Math.min(start, end), Math.max(start, end) + 1)\r\n        this.selectedItems.push(\r\n          ...itemsForToggle.map(item => {\r\n            return item.id\r\n          })\r\n        )\r\n      } else {\r\n        if (this.selectedItems.includes(itemId)) {\r\n          this.selectedItems = this.selectedItems.filter(x => x !== itemId)\r\n        } else { this.selectedItems.push(itemId) }\r\n      }\r\n    },\r\n    handleContextmenu (vnode) {\r\n      if (!this.selectedItems.includes(vnode.key)) {\r\n        this.selectedItems = [vnode.key]\r\n      }\r\n    },\r\n    onContextCopy () {\r\n      console.log('context menu item clicked - Copy Items: ', this.selectedItems)\r\n    },\r\n    onContextArchive () {\r\n      console.log('context menu item clicked - Move to Archive Items: ', this.selectedItems)\r\n    },\r\n    onContextDelete () {\r\n      console.log('context menu item clicked - Delete Items: ', this.selectedItems)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getSurveyItems()\r\n  }\r\n}\r\n",{"version":3,"sources":["Survey.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Survey.vue","sourceRoot":"src/views/app/applications","sourcesContent":["<template>\r\n  <div class=\"disable-text-selection\">\r\n    <b-row class=\"app-row survey-app\" >\r\n      <b-colxx xxs=\"12\">\r\n        <div class=\"mb-2\">\r\n          <h1>{{ $t('menu.survey') }}</h1>\r\n          <div class=\"float-sm-right\">\r\n            <b-button v-b-modal.modalright variant=\"primary\" size=\"lg\" class=\"top-right-button\">{{ $t('survey.add-new') }}</b-button>\r\n            <b-button-group v-if=\"isLoadSurveys\">\r\n              <b-dropdown  split right @click=\"selectAll(true)\" class=\"check-button\" variant=\"primary\">\r\n                  <label class=\"custom-control custom-checkbox pl-4 mb-0 d-inline-block\" slot=\"button-content\">\r\n                    <input class=\"custom-control-input\" type=\"checkbox\"\r\n                    :checked=\"isSelectedAll()\"\r\n                    v-shortkey=\"{select: ['ctrl','a'], undo: ['ctrl','d']}\" @shortkey=\"keymap\"\r\n                    />\r\n                    <span :class=\"{\r\n                      'custom-control-label' :true,\r\n                      'indeterminate' : isAnyItemSelected()\r\n                    }\"/>\r\n                  </label>\r\n                <b-dropdown-item>{{$t('survey.delete')}}</b-dropdown-item>\r\n                <b-dropdown-item>{{$t('survey.another-action')}}</b-dropdown-item>\r\n              </b-dropdown>\r\n            </b-button-group>\r\n            <b-modal id=\"modalright\" ref=\"modalright\" :title=\"$t('survey.add-new-title')\" class=\"modal-right\">\r\n                <b-form>\r\n                  <b-form-group :label=\"$t('survey.title')\">\r\n                    <b-form-input v-model=\"newItem.title\"  />\r\n                  </b-form-group>\r\n                  <b-form-group  :label=\"$t('todo.detail')\">\r\n                    <b-textarea  v-model=\"newItem.detail\"  :rows=\"2\" :max-rows=\"2\"/>\r\n                  </b-form-group>\r\n                  <b-form-group :label=\"$t('survey.category')\">\r\n                      <v-select  :options=\"categories\" v-model=\"newItem.category\"/>\r\n                  </b-form-group>\r\n                  <b-form-group :label=\"$t('survey.label')\">\r\n                      <v-select  :options=\"labels\" v-model=\"newItem.label\"/>\r\n                  </b-form-group>\r\n                  <b-form-group :label=\"$t('survey.status')\">\r\n                    <b-form-radio-group stacked class=\"pt-2\" :options=\"statuses\" v-model=\"newItem.status\" />\r\n                  </b-form-group>\r\n                </b-form>\r\n\r\n                <template slot=\"modal-footer\">\r\n                  <b-button variant=\"outline-secondary\" @click=\"hideModal('modalright')\">{{ $t('survey.cancel') }}</b-button>\r\n                  <b-button variant=\"primary\" @click=\"addNewItem()\" class=\"mr-1\">{{ $t('survey.submit') }}</b-button>\r\n                </template>\r\n              </b-modal>\r\n\r\n          </div>\r\n          <piaf-breadcrumb/>\r\n        </div>\r\n        <div class=\"mb-2\">\r\n          <b-button variant=\"empty\" class=\"pt-0 pl-0 d-inline-block d-md-none\" v-b-toggle.displayOptions>\r\n            {{ $t('survey.display-options') }} <i class=\"simple-icon-arrow-down align-middle\" />\r\n          </b-button>\r\n          <b-collapse id=\"displayOptions\" class=\"d-md-block\">\r\n            <div class=\"d-block d-md-inline-block mb-2\">\r\n              <b-dropdown id=\"ddown1\" :text=\"`${$t('survey.orderby')} ${sort.label}`\" variant=\"outline-dark\" class=\"mr-1 float-md-left btn-group \" size=\"xs\">\r\n                  <b-dropdown-item v-for=\"(order,index) in sortOptions\" :key=\"`order${index}`\" @click=\"changeOrderBy(order)\" >{{ order.label }}</b-dropdown-item>\r\n              </b-dropdown>\r\n              <div class=\"search-sm d-inline-block float-md-left mr-1 align-top\">\r\n                <b-input :placeholder=\"$t('menu.search')\" v-model=\"search\"/>\r\n              </div>\r\n            </div>\r\n          </b-collapse>\r\n        </div>\r\n        <div class=\"separator mb-5\"/>\r\n\r\n        <b-row v-if=\"isLoadSurveys\" key=\"itemList\">\r\n            <b-colxx xxs=\"12\" v-for=\"(item,index) in surveyItems\" :key=\"`item${index}`\">\r\n              <survey-list-item\r\n                  :key=\"item.id\"\r\n                  :data=\"item\"\r\n                  :selected-items=\"selectedItems\"\r\n                  @toggle-item=\"toggleItem\"\r\n                  v-contextmenu:contextmenu\r\n                />\r\n            </b-colxx>\r\n        </b-row>\r\n        <div v-else class=\"loading\" key=\"itemLoading\"></div>\r\n      </b-colxx>\r\n    </b-row>\r\n    <v-contextmenu ref=\"contextmenu\" @contextmenu=\"handleContextmenu\">\r\n      <v-contextmenu-item @click=\"onContextCopy()\"><i class=\"simple-icon-docs\" /> <span>Copy</span></v-contextmenu-item>\r\n      <v-contextmenu-item @click=\"onContextArchive()\"><i class=\"simple-icon-drawer\" /> <span>Move to archive</span></v-contextmenu-item>\r\n      <v-contextmenu-item @click=\"onContextDelete()\"><i class=\"simple-icon-trash\" /> <span>Delete</span></v-contextmenu-item>\r\n    </v-contextmenu>\r\n\r\n    <application-menu>\r\n      <vue-perfect-scrollbar :settings=\"{ suppressScrollX: true, wheelPropagation: false }\"  >\r\n        <div class=\"p-4\">\r\n          <p class=\"text-muted text-small mb-3\">{{$t('survey.status')}}</p>\r\n          <ul class=\"list-unstyled mb-4\">\r\n            <li class=\"nav-item\"><a href=\"#\" >\r\n                 <i class=\"simple-icon-reload\" />{{$t('survey.all-surveys')}} <span class=\"float-right\" v-if=\"isLoadSurveys\">{{surveyItems.length}}</span>\r\n              </a></li>\r\n            <li class=\"nav-item\"><a href=\"#\" >\r\n                 <i class=\"simple-icon-refresh\" />{{$t('survey.active-surveys')}} <span class=\"float-right\" v-if=\"isLoadSurveys\">{{surveyItems.filter(x => x.status === \"PENDING\").length}}</span>\r\n              </a></li>\r\n            <li class=\"nav-item\"><a href=\"#\" >\r\n                 <i class=\"simple-icon-check\" />{{$t('survey.completed-surveys')}} <span class=\"float-right\" v-if=\"isLoadSurveys\">{{surveyItems.filter(x => x.status === \"COMPLETED\").length}}</span>\r\n              </a></li>\r\n          </ul>\r\n            <p class=\"text-muted text-small mb-1\">{{$t('survey.categories')}}</p>\r\n            <ul class=\"list-unstyled mb-4\">\r\n              <b-form-radio-group stacked class=\"pt-2\" :options=\"categories.map((c)=> {return {text:c.label,value:c.value}})\"  />\r\n            </ul>\r\n             <p class=\"text-muted text-small mb-3\">{{$t('survey.labels')}}</p>\r\n            <div>\r\n              <p class=\"d-sm-inline-block mb-1\" v-for=\"(l,index) in labels\" :key=\"index\">\r\n                <a href=\"#\">\r\n                  <b-badge pill :variant=\"`outline-${l.color}`\" class=\"mb-1 mr-1\">{{l.label}}</b-badge>\r\n                </a>\r\n              </p>\r\n            </div>\r\n        </div>\r\n\r\n      </vue-perfect-scrollbar>\r\n    </application-menu>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\r\n\r\nimport vSelect from 'vue-select'\r\nimport 'vue-select/dist/vue-select.css'\r\nimport SurveyListItem from '@/components/SurveyApp/SurveyListItem'\r\nimport ApplicationMenu from '@/components/Common/ApplicationMenu'\r\n\r\nexport default {\r\n  components: {\r\n    vSelect,\r\n    SurveyListItem,\r\n    ApplicationMenu\r\n  },\r\n  data () {\r\n    return {\r\n      sort: { column: 'title', label: 'Title' },\r\n      sortOptions: [\r\n        { column: 'title', label: 'Title' },\r\n        { column: 'category', label: 'Category' },\r\n        { column: 'label', label: 'Label' },\r\n        { column: 'status', label: 'Status' }\r\n      ],\r\n      search: '',\r\n      selectedItems: [],\r\n      categories: [\r\n        { label: 'Development', value: 'Development' },\r\n        { label: 'Workplace', value: 'Workplace' },\r\n        { label: 'Hardware', value: 'Hardware' }\r\n      ],\r\n      labels: [\r\n        { label: 'EDUCATION', value: 'EDUCATION', color: 'secondary' },\r\n        { label: 'NEW FRAMEWORK', value: 'NEW FRAMEWORK', color: 'primary' },\r\n        { label: 'PERSONAL', value: 'PERSONAL', color: 'info' }\r\n      ],\r\n      statuses: [\r\n        { text: 'ACTIVE', value: 'ACTIVE' },\r\n        { text: 'COMPLETED', value: 'COMPLETED' }\r\n      ],\r\n      newItem: {\r\n        title: '',\r\n        category: '',\r\n        detail: '',\r\n        label: '',\r\n        status: ''\r\n      }\r\n\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isLoadSurveys', 'surveyItems', 'surveyError'])\r\n  },\r\n  methods: {\r\n    ...mapActions(['getSurveyItems']),\r\n    ...mapMutations(['addSurveyItem']),\r\n    isSelectedAll () {\r\n      return this.selectedItems.length >= this.surveyItems.length\r\n    },\r\n    isAnyItemSelected () {\r\n      return this.selectedItems.length > 0 && this.selectedItems.length < this.surveyItems.length\r\n    },\r\n    hideModal (refname) {\r\n      this.$refs[refname].hide()\r\n    },\r\n    changeOrderBy (sort) {\r\n      this.sort = sort\r\n    },\r\n    addNewItem () {\r\n      const date = new Date()\r\n      this.addSurveyItem({ title: this.newItem.title,\r\n        category: this.newItem.category.value,\r\n        detail: this.newItem.detail,\r\n        label: this.newItem.label.value,\r\n        status: this.newItem.status,\r\n        date: date.getDay() + '.' + date.getMonth() + 1 + '.' + date.getFullYear(),\r\n        labelColor: this.newItem.label.color,\r\n        questions: []\r\n      })\r\n      this.newItem = { title: '', category: '', detail: '', label: '', status: '' }\r\n      this.hideModal('modalright')\r\n    },\r\n    selectAll (isToggle) {\r\n      if (this.selectedItems.length >= this.surveyItems.length) {\r\n        if (isToggle) { this.selectedItems = [] }\r\n      } else {\r\n        this.selectedItems = this.surveyItems.map(x => x.id)\r\n      }\r\n    },\r\n    keymap (event) {\r\n      switch (event.srcKey) {\r\n        case 'select':\r\n          this.selectAll(false)\r\n          break\r\n        case 'undo':\r\n          this.selectedItems = []\r\n          break\r\n      }\r\n    },\r\n    getIndex (value, arr, prop) {\r\n      for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i][prop] === value) {\r\n          return i\r\n        }\r\n      }\r\n      return -1\r\n    },\r\n    toggleItem (event, itemId) {\r\n      if (event.shiftKey && this.selectedItems.length > 0) {\r\n        let itemsForToggle = this.surveyItems\r\n        var start = this.getIndex(itemId, itemsForToggle, 'id')\r\n        var end = this.getIndex(this.selectedItems[this.selectedItems.length - 1], itemsForToggle, 'id')\r\n        itemsForToggle = itemsForToggle.slice(Math.min(start, end), Math.max(start, end) + 1)\r\n        this.selectedItems.push(\r\n          ...itemsForToggle.map(item => {\r\n            return item.id\r\n          })\r\n        )\r\n      } else {\r\n        if (this.selectedItems.includes(itemId)) {\r\n          this.selectedItems = this.selectedItems.filter(x => x !== itemId)\r\n        } else { this.selectedItems.push(itemId) }\r\n      }\r\n    },\r\n    handleContextmenu (vnode) {\r\n      if (!this.selectedItems.includes(vnode.key)) {\r\n        this.selectedItems = [vnode.key]\r\n      }\r\n    },\r\n    onContextCopy () {\r\n      console.log('context menu item clicked - Copy Items: ', this.selectedItems)\r\n    },\r\n    onContextArchive () {\r\n      console.log('context menu item clicked - Move to Archive Items: ', this.selectedItems)\r\n    },\r\n    onContextDelete () {\r\n      console.log('context menu item clicked - Delete Items: ', this.selectedItems)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getSurveyItems()\r\n  }\r\n}\r\n</script>\r\n"]}]}
{"remainingRequest":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/babel-loader/lib/index.js!/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/carlaheywood/Documents/GitHub/Accutrate/src/components/Common/Breadcrumb.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/src/components/Common/Breadcrumb.vue","mtime":1554628934000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/carlaheywood/Documents/GitHub/Accutrate/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: ['heading'],\n  data: function data() {\n    return {\n      items: []\n    };\n  },\n  methods: {\n    getUrl: function getUrl(path, sub, index) {\n      var pathToGo = '/' + path.split(sub)[0] + sub;\n\n      if (pathToGo === '/app') {\n        pathToGo = '/';\n      }\n\n      return pathToGo;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var path = this.$route.path.substr(1);\n    var rawPaths = path.split('/');\n\n    for (var pName in this.$route.params) {\n      if (rawPaths.includes(this.$route.params[pName])) {\n        rawPaths = rawPaths.filter(function (x) {\n          return x !== _this.$route.params[pName];\n        });\n      }\n    }\n\n    rawPaths.map(function (sub, index) {\n      _this.items.push({\n        text: _this.$t('menu.' + sub),\n        to: _this.getUrl(path, sub, index)\n      });\n    });\n  }\n};",{"version":3,"sources":["Breadcrumb.vue"],"names":[],"mappings":";;;;;;;;;;;;AAUA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,SAAA,CADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA;AADA,KAAA;AAGA,GANA;AAOA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,kBACA,IADA,EACA,GADA,EACA,KADA,EACA;AACA,UAAA,QAAA,GAAA,MAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,GAAA;;AACA,UAAA,QAAA,KAAA,MAAA,EAAA;AACA,QAAA,QAAA,GAAA,GAAA;AACA;;AACA,aAAA,QAAA;AACA;AAPA,GAPA;AAgBA,EAAA,OAhBA,qBAgBA;AAAA;;AACA,QAAA,IAAA,GAAA,KAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AACA,QAAA,QAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AAEA,SAAA,IAAA,KAAA,IAAA,KAAA,MAAA,CAAA,MAAA,EAAA;AACA,UAAA,QAAA,CAAA,QAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,QAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AAAA,SAAA,CAAA;AACA;AACA;;AACA,IAAA,QAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA,KAAA,EAAA;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAAA,UAAA,GAAA,CADA;AAEA,QAAA,EAAA,EAAA,KAAA,CAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,KAAA;AAFA,OAAA;AAIA,KALA;AAMA;AA/BA,CAAA","sourcesContent":["<template>\r\n    <span>\r\n      <h1 v-if=\"heading && heading.length>0\">{{ heading }}</h1>\r\n      <b-nav class=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n          <b-breadcrumb :items=\"items\"/>\r\n      </b-nav>\r\n    </span>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: ['heading'],\r\n  data () {\r\n    return {\r\n      items: []\r\n    }\r\n  },\r\n  methods: {\r\n    getUrl (path, sub, index) {\r\n      var pathToGo = '/' + path.split(sub)[0] + sub\r\n      if (pathToGo === '/app') {\r\n        pathToGo = '/'\r\n      }\r\n      return pathToGo\r\n    }\r\n  },\r\n  mounted () {\r\n    let path = this.$route.path.substr(1)\r\n    let rawPaths = path.split('/')\r\n\r\n    for (var pName in this.$route.params) {\r\n      if (rawPaths.includes(this.$route.params[pName])) {\r\n        rawPaths = rawPaths.filter(x => x !== this.$route.params[pName])\r\n      }\r\n    }\r\n    rawPaths.map((sub, index) => {\r\n      this.items.push({\r\n        text: this.$t('menu.' + sub),\r\n        to: this.getUrl(path, sub, index)\r\n      })\r\n    })\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components/Common"}]}